{"version":3,"sources":["../../src/constants/TriggerKeys.ts","../../src/util/getTransliterationLanguages.ts","../../src/constants/Urls.ts","../../src/index.tsx","../../src/util/caret-util.ts","../../src/util/suggestions-util.ts","../../src/util/touch-util.ts","App.tsx","index.tsx"],"names":["KEY_RETURN","KEY_ENTER","KEY_TAB","KEY_SPACE","async","sessionStorage","getItem","JSON","parse","apiURL","Headers","append","requestOptions","method","res","fetch","data","json","setItem","stringify","e","console","error","renderComponent","props","lang","offsetX","offsetY","onChange","onChangeText","onBlur","value","onKeyDown","containerClassName","containerStyles","activeItemStyles","maxOptions","hideSuggestionBoxOnMobileDevices","hideSuggestionBoxBreakpoint","triggerKeys","insertCurrentSelectionOnBlur","showCurrentWordAsLastSuggestion","enabled","rest","left","setLeft","top","setTop","selection","setSelection","matchStart","setMatchStart","matchEnd","setMatchEnd","inputRef","windowSize","setWindowSize","width","height","direction","setDirection","googleFont","setGoogleFont","options","setOptions","shouldRenderSuggestions","reset","handleSelection","index","triggerKey","currentString","log","newValue","substring","length","setTimeout","elem","caretPos","current","selectionStart","focus","setSelectionRange","target","renderSuggestions","numOptions","word","config","body","input","source","replace","encodeURIComponent","serviceId","language","sourceLanguage","sourceScriptCode","targetLanguage","targetScriptCode","isSentence","numSuggestions","controlConfig","dataTracking","mode","headers","Authorization","then","response","lastWord","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","langList","langObj","find","l","LangCode","Direction","GoogleFont","FallbackFont","getDirectionAndFont","fallbackFont","document","getElementById","link","createElement","id","href","rel","head","appendChild","style","position","className","currentTarget","caret","el","selectionEnd","start","end","indexOfLastSpace","lastIndexOf","currentWord","slice","rect","getBoundingClientRect","Math","min","event","includes","key","preventDefault","navigator","maxTouchPoints","msMaxTouchPoints","ref","fontFamily","backgroundClip","backgroundColor","border","boxShadow","display","fontSize","listStyle","padding","textAlign","zIndex","Array","from","Set","map","item","cursor","minWidth","color","onMouseEnter","onClick","App","text","setText","useState","languages","setLanguages","setLang","useEffect","getTransliterationLanguages","langs","_jsxs","children","_jsx","DisplayName","htmlFor","IndicTransliterate","placeholder","Input","fullWidth","ReactDOM","render"],"mappings":"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","file":"static/js/main.3d75e46e.chunk.js","sourcesContent":["export const TriggerKeys = {\n  KEY_RETURN: \"Enter\",\n  KEY_ENTER: \"Enter\",\n  KEY_TAB: \"Tab\",\n  KEY_SPACE: \" \",\n};\n","import { LangObject } from \"../types/LangObject\";\nimport { BASE_URL } from \"../constants/Urls\";\n\nexport const getTransliterationLanguages = async (): Promise<\n  LangObject[] | undefined\n> => {\n  if (sessionStorage.getItem(\"indic_transliterate__supported_languages\")) {\n    return JSON.parse(\n      sessionStorage.getItem(\"indic_transliterate__supported_languages\") || \"\",\n    );\n  } else {\n    const apiURL = `${BASE_URL}languages`;\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n      method: \"GET\",\n    };\n    try {\n      const res = await fetch(apiURL, requestOptions);\n      const data = await res.json();\n      sessionStorage.setItem(\n        \"indic_transliterate__supported_languages\",\n        JSON.stringify(data),\n      );\n      return data;\n    } catch (e) {\n      console.error(\"There was an error with transliteration\", e);\n      return [];\n    }\n  }\n};\n","export const BASE_URL = \"https://xlit-api.ai4bharat.org/\";\nexport const DHRUVA_URL = \"https://api.dhruva.ekstep.ai/services/inference/transliteration\";\n","import * as React from \"react\";\nimport { useEffect, useRef, useState, useMemo } from \"react\";\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\nimport getCaretCoordinates from \"textarea-caret\";\nimport { IndicTransliterateProps } from \"./interfaces/Props\";\nimport { Language } from \"./types/Language\";\nimport { LangObject } from \"./types/LangObject\";\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\nimport { getTransliterationLanguages } from \"./util/getTransliterationLanguages\";\n\nconst KEY_UP = \"ArrowUp\";\nconst KEY_DOWN = \"ArrowDown\";\nconst KEY_ESCAPE = \"Escape\";\n\nconst OPTION_LIST_Y_OFFSET = 10;\nconst OPTION_LIST_MIN_WIDTH = 100;\n\nexport const IndicTransliterate = ({\n  renderComponent = (props) => <input {...props} />,\n  lang = \"hi\",\n  offsetX = 0,\n  offsetY = 10,\n  onChange,\n  onChangeText,\n  onBlur,\n  value,\n  onKeyDown,\n  containerClassName = \"\",\n  containerStyles = {},\n  activeItemStyles = {},\n  maxOptions = 5,\n  hideSuggestionBoxOnMobileDevices = false,\n  hideSuggestionBoxBreakpoint = 450,\n  triggerKeys = [\n    TriggerKeys.KEY_SPACE,\n    TriggerKeys.KEY_ENTER,\n    TriggerKeys.KEY_RETURN,\n    TriggerKeys.KEY_TAB,\n  ],\n  insertCurrentSelectionOnBlur = true,\n  showCurrentWordAsLastSuggestion = true,\n  enabled = true,\n  ...rest\n}: IndicTransliterateProps): JSX.Element => {\n  const [left, setLeft] = useState(0);\n  const [top, setTop] = useState(0);\n  const [selection, setSelection] = useState<number>(0);\n  const [matchStart, setMatchStart] = useState(-1);\n  const [matchEnd, setMatchEnd] = useState(-1);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n  const [direction, setDirection] = useState(\"ltr\");\n  const [googleFont, setGoogleFont] = useState<string | null>(null);\n  const [options, setOptions] = useState<string[]>([]);\n\n  const shouldRenderSuggestions = useMemo(\n    () =>\n      hideSuggestionBoxOnMobileDevices\n        ? windowSize.width > hideSuggestionBoxBreakpoint\n        : true,\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\n  );\n\n  const reset = () => {\n    // reset the component\n    setSelection(0);\n    setOptions([]);\n  };\n\n  const handleSelection = (index: number, triggerKey = \" \") => {\n    const currentString = value;\n    // create a new string with the currently typed word\n    // replaced with the word in transliterated language\n    console.log(index);\n    const newValue =\n      currentString.substring(0, matchStart) +\n      options[index] +\n      \" \" +\n      currentString.substring(matchEnd + 1, currentString.length);\n\n    // set the position of the caret (cursor) one character after the\n    // the position of the new word\n    setTimeout(() => {\n      setCaretPosition(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inputRef.current!,\n        triggerKey === \"Enter\"\n          ? matchStart + options[index].length\n          : matchStart + options[index].length + 1,\n      );\n    }, 1);\n\n    // bubble up event to the parent component\n    const e = {\n      target: { value: newValue },\n    } as unknown as React.FormEvent<HTMLInputElement>;\n    onChangeText(newValue);\n    onChange && onChange(e);\n    reset();\n    return inputRef.current?.focus();\n  };\n\n  const renderSuggestions = async (lastWord: string) => {\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n    // fetch suggestion from api\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\n\n    const numOptions = showCurrentWordAsLastSuggestion\n      ? maxOptions - 1\n      : maxOptions;\n\n    const data = await getTransliterateSuggestions(lastWord, {\n      numOptions,\n      showCurrentWordAsLastSuggestion,\n      lang,\n    });\n    setOptions(data ?? []);\n  };\n\n  const getDirectionAndFont = async (lang: Language) => {\n    const langList = await getTransliterationLanguages();\n    const langObj = langList?.find((l) => l.LangCode === lang) as LangObject;\n    return [\n      langObj?.Direction ?? \"ltr\",\n      langObj?.GoogleFont,\n      langObj?.FallbackFont,\n    ];\n  };\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n\n    // bubble up event to the parent component\n    onChange && onChange(e);\n    onChangeText(value);\n\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n\n    // get the current index of the cursor\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\n    const input = inputRef.current;\n\n    if (!input) return;\n\n    const caretPos = getCaretCoordinates(input, caret);\n\n    // search for the last occurence of the space character from\n    // the cursor\n    const indexOfLastSpace =\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\n        ? value.lastIndexOf(\"\\n\", caret - 1)\n        : value.lastIndexOf(\" \", caret - 1);\n\n    // first character of the currently being typed word is\n    // one character after the space character\n    // index of last character is one before the current position\n    // of the caret\n    setMatchStart(indexOfLastSpace + 1);\n    setMatchEnd(caret - 1);\n\n    // currentWord is the word that is being typed\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\n    if (currentWord && enabled) {\n      // make an api call to fetch suggestions\n      renderSuggestions(currentWord);\n      console.log(value);\n\n      const rect = input.getBoundingClientRect();\n\n      // calculate new left and top of the suggestion list\n\n      // minimum of the caret position in the text input and the\n      // width of the text input\n      const left = Math.min(\n        caretPos.left,\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\n      );\n\n      // minimum of the caret position from the top of the input\n      // and the height of the input\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\n\n      setTop(top);\n      setLeft(left);\n    } else {\n      reset();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const helperVisible = options.length > 0;\n\n    if (helperVisible) {\n      if (triggerKeys.includes(event.key)) {\n        event.preventDefault();\n        handleSelection(selection, event.key);\n      } else {\n        switch (event.key) {\n          case KEY_ESCAPE:\n            event.preventDefault();\n            reset();\n            break;\n          case KEY_UP:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_DOWN:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          default:\n            onKeyDown && onKeyDown(event);\n            break;\n        }\n      }\n    } else {\n      onKeyDown && onKeyDown(event);\n    }\n  };\n\n  const handleBlur = (\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (!isTouchEnabled()) {\n      if (insertCurrentSelectionOnBlur && options[selection]) {\n        handleSelection(selection);\n      } else {\n        reset();\n      }\n    }\n    onBlur && onBlur(event);\n  };\n\n  const handleResize = () => {\n    // TODO implement the resize function to resize\n    // the helper on screen size change\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    getDirectionAndFont(lang).then(([direction, googleFont, fallbackFont]) => {\n      setDirection(direction);\n      // import google font if not already imported\n      if (googleFont) {\n        if (!document.getElementById(`font-${googleFont}`)) {\n          const link = document.createElement(\"link\");\n          link.id = `font-${googleFont}`;\n          link.href = `https://fonts.googleapis.com/css?family=${googleFont}`;\n          link.rel = \"stylesheet\";\n          document.head.appendChild(link);\n        }\n        setGoogleFont(`${googleFont}, ${fallbackFont ?? \"sans-serif\"}`);\n      } else {\n        setGoogleFont(null);\n      }\n    });\n  }, [lang]);\n\n  return (\n    <div\n      // position relative is required to show the component\n      // in the correct position\n      style={{\n        ...containerStyles,\n        position: \"relative\",\n      }}\n      className={containerClassName}\n    >\n      {renderComponent({\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: handleBlur,\n        ref: inputRef,\n        value: value,\n        \"data-testid\": \"rt-input-component\",\n        lang: lang,\n        style: {\n          direction: direction,\n          ...(googleFont && { fontFamily: googleFont }),\n        },\n        ...rest,\n      })}\n      {shouldRenderSuggestions && options.length > 0 && (\n        <ul\n          style={{\n            backgroundClip : \"padding-box\",\n            backgroundColor : \"#fff\",\n            border : \"1px solid rgba(0, 0, 0, 0.15)\",\n            boxShadow : \"0 6px 12px rgba(0, 0, 0, 0.175)\",\n            display: \"block\",\n            fontSize: \"14px\",\n            listStyle: \"none\",\n            padding: \"1px\",\n            textAlign: \"left\",\n            zIndex: 20000,\n            left: `${left + offsetX}px`,\n            top: `${top + offsetY}px`,\n            position: \"absolute\",\n            width: \"auto\",\n            ...(googleFont && { fontFamily: googleFont }),\n          }}\n          data-testid=\"rt-suggestions-list\"\n          lang={lang}\n        >\n          {/*\n           * convert to set and back to prevent duplicate list items\n           * that might happen while using backspace\n           */}\n          {Array.from(new Set(options)).map((item, index) => (\n            <li\n              style={index === selection ? { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#65c3d7\", color:\"#fff\"} : { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#fff\"} }\n              onMouseEnter={() => {\n                setSelection(index);\n              }}\n              onClick={() => handleSelection(index)}\n              key={item}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport type { IndicTransliterateProps, Language };\nexport { TriggerKeys, getTransliterateSuggestions };\nexport { getTransliterationLanguages };\n","export function getInputSelection(el: HTMLInputElement) {\n  const start = 0;\n  const end = 0;\n\n  if (!el) {\n    return { start, end };\n  }\n\n  if (\n    typeof el.selectionStart === \"number\" &&\n    typeof el.selectionEnd === \"number\"\n  ) {\n    return { start: el.selectionStart, end: el.selectionEnd };\n  }\n\n  return { start, end };\n}\n\nexport function setCaretPosition(elem: HTMLInputElement, caretPos: number) {\n  if (elem) {\n    if (elem.selectionStart) {\n      elem.focus();\n      elem.setSelectionRange(caretPos, caretPos);\n    } else {\n      elem.focus();\n    }\n  }\n}\n","import { Language } from \"../types/Language\";\nimport { DHRUVA_URL } from \"../constants/Urls\";\n\ntype Config = {\n  numOptions?: number;\n  showCurrentWordAsLastSuggestion?: boolean;\n  lang?: Language;\n};\n\nexport const getTransliterateSuggestions = async (\n  word: string,\n  config?: Config,\n): Promise<string[] | undefined> => {\n  const { showCurrentWordAsLastSuggestion, lang } = config || {\n    numOptions: 5,\n    showCurrentWordAsLastSuggestion: true,\n    lang: \"hi\",\n  };\n  // fetch suggestion from api\n  // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${word}`;\n  // let myHeaders = new Headers();\n  // myHeaders.append(\"Content-Type\", \"application/json\");\n\n  // if (word == '.' || word == '..') {\n  //   word = ' ' + word;\n  // }\n  // word = encodeURIComponent(word);\n\n  const body = {\n    input: [\n      {\n        source: word === \".\" || word === \"..\" ? \" \" + word.replace(\".\", \"%2E\") : encodeURIComponent(word).replace(\".\", \"%2E\"),\n      },\n    ],\n    config: {\n      serviceId: \"ai4bharat/indicxlit--gpu-t4\",\n      language: {\n        sourceLanguage: \"en\",\n        sourceScriptCode: \"\",\n        targetLanguage: lang,\n        targetScriptCode: \"\"\n      },\n      isSentence: false,\n      numSuggestions: 5,\n    },\n    controlConfig: {\n      dataTracking: true,\n    },\n  };\n\n  try {\n    const res = await fetch(DHRUVA_URL, {\n      method: \"post\",\n      body: JSON.stringify(body),\n      mode: \"cors\",\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        Authorization:\n          \"uOQOvZAkdKQpaeZa5-K03k9SIXOtZFEIkdj995-lTz_bozcijCNgVye2jEGIRFQG\",\n      }),\n    }).then((response) => response.json());\n\n    console.log(\"library data\", res);\n    const data = res[\"output\"][0];\n    if (data && data.target.length > 0) {\n      const found = showCurrentWordAsLastSuggestion\n        ? [...data.target, word]\n        : data.target;\n      return found;\n    } else {\n      if (showCurrentWordAsLastSuggestion) {\n        return [word];\n      }\n      return [];\n    }\n  } catch (e) {\n    // catch error\n    console.error(\"There was an error with transliteration\", e);\n    return [];\n  }\n};\n","export function isTouchEnabled() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\n// import component\nimport { IndicTransliterate, getTransliterationLanguages } from \"@ai4bharat/indic-transliterate\";\n\n// Material Ui input component\nimport Input from \"@material-ui/core/Input\";\nimport { LangObject } from \"../../dist/types\";\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [languages, setLanguages] = useState<LangObject[]|undefined>();\n  const [lang, setLang] = useState(\"hi\");\n\n  useEffect(() => {\n    getTransliterationLanguages().then(langs => setLanguages(langs));\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <h2>Indic transliterate</h2>\n\n      <select\n        className=\"language-dropdown\"\n        value={lang}\n        onChange={(e) => setLang(e.target.value)}\n      >\n        {languages?.map((l) => (\n          <option key={l.LangCode} value={l.LangCode}>\n            {l.DisplayName}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-input\">Using input</label>\n      <IndicTransliterate\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-input\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-textarea\">Using textarea</label>\n      <IndicTransliterate\n        renderComponent={(props) => <textarea {...props} />}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-textarea\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-material-ui-input\">\n        Using Material UI input\n      </label>\n      <IndicTransliterate\n        renderComponent={(props) => {\n          const inputRef = props.ref;\n\n          delete props.ref;\n\n          return <Input fullWidth {...props} inputRef={inputRef} />;\n        }}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-material-ui-input\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}