{"version":3,"sources":["../../src/constants/TriggerKeys.ts","../../src/constants/Urls.ts","../../src/util/getTransliterationLanguages.ts","../../src/index.tsx","../../src/util/caret-util.ts","../../src/util/suggestions-util.ts","../../src/util/touch-util.ts","App.tsx","index.tsx"],"names":["KEY_RETURN","KEY_ENTER","KEY_TAB","KEY_SPACE","async","sessionStorage","getItem","JSON","parse","apiURL","Headers","append","requestOptions","method","res","fetch","data","json","setItem","stringify","e","console","error","renderComponent","props","lang","offsetX","offsetY","onChange","onChangeText","onBlur","value","onKeyDown","containerClassName","containerStyles","activeItemStyles","maxOptions","hideSuggestionBoxOnMobileDevices","hideSuggestionBoxBreakpoint","triggerKeys","insertCurrentSelectionOnBlur","showCurrentWordAsLastSuggestion","enabled","rest","left","setLeft","top","setTop","selection","setSelection","matchStart","setMatchStart","matchEnd","setMatchEnd","inputRef","windowSize","setWindowSize","width","height","direction","setDirection","googleFont","setGoogleFont","options","setOptions","logJsonArray","setLogJsonArray","numSpaces","setNumSpaces","parentUuid","setParentUuid","Math","random","toString","substr","uuid","setUuid","subStrLength","setSubStrLength","restart","setRestart","shouldRenderSuggestions","reset","handleSelection","index","currentString","newValue","substring","length","lastLogJson","logJson","keystrokes","results","opted","created_at","Date","toISOString","setTimeout","elem","caretPos","current","selectionStart","focus","setSelectionRange","target","renderSuggestions","lastWord","wholeText","numOptions","word","config","replace","encodeURIComponent","log","result","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","langList","langObj","find","l","LangCode","Direction","GoogleFont","FallbackFont","getDirectionAndFont","then","fallbackFont","document","getElementById","link","createElement","id","href","rel","head","appendChild","style","position","className","currentTarget","finalJson","undefined","localStorage","body","headers","ok","catch","err","caret","el","selectionEnd","start","end","input","indexOfLastSpace","lastIndexOf","currentWord","slice","rect","getBoundingClientRect","min","event","includes","key","preventDefault","navigator","maxTouchPoints","msMaxTouchPoints","ref","fontFamily","backgroundClip","backgroundColor","border","boxShadow","display","fontSize","listStyle","padding","textAlign","zIndex","Array","from","Set","map","item","cursor","minWidth","color","onMouseEnter","onClick","App","text","setText","useState","languages","setLanguages","setLang","useEffect","getTransliterationLanguages","langs","_jsxs","children","_jsx","DisplayName","htmlFor","IndicTransliterate","placeholder","Input","fullWidth","ReactDOM","render"],"mappings":"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","file":"static/js/main.e1298b35.chunk.js","sourcesContent":["export const TriggerKeys = {\n  KEY_RETURN: \"Enter\",\n  KEY_ENTER: \"Enter\",\n  KEY_TAB: \"Tab\",\n  KEY_SPACE: \" \",\n};\n","export const BASE_URL = \"https://xlit-api.ai4bharat.org/\";\nexport const DHRUVA_URL = \"https://api.dhruva.ekstep.ai/services/inference/transliteration\";\n","import { LangObject } from \"../types/LangObject\";\nimport { BASE_URL } from \"../constants/Urls\";\n\nexport const getTransliterationLanguages = async (): Promise<\n  LangObject[] | undefined\n> => {\n  if (sessionStorage.getItem(\"indic_transliterate__supported_languages\")) {\n    return JSON.parse(\n      sessionStorage.getItem(\"indic_transliterate__supported_languages\") || \"\",\n    );\n  } else {\n    const apiURL = `${BASE_URL}languages`;\n    const myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n\n    const requestOptions = {\n      method: \"GET\",\n    };\n    try {\n      const res = await fetch(apiURL, requestOptions);\n      const data = await res.json();\n      sessionStorage.setItem(\n        \"indic_transliterate__supported_languages\",\n        JSON.stringify(data),\n      );\n      return data;\n    } catch (e) {\n      console.error(\"There was an error with transliteration\", e);\n      return [];\n    }\n  }\n};\n","import * as React from \"react\";\nimport { useEffect, useRef, useState, useMemo } from \"react\";\nimport { setCaretPosition, getInputSelection, isTouchEnabled } from \"./util\";\nimport getCaretCoordinates from \"textarea-caret\";\nimport { IndicTransliterateProps } from \"./interfaces/Props\";\nimport { Language } from \"./types/Language\";\nimport { LangObject } from \"./types/LangObject\";\nimport { TriggerKeys } from \"./constants/TriggerKeys\";\nimport { getTransliterateSuggestions } from \"./util/suggestions-util\";\nimport { getTransliterationLanguages } from \"./util/getTransliterationLanguages\";\n\nconst KEY_UP = \"ArrowUp\";\nconst KEY_DOWN = \"ArrowDown\";\nconst KEY_ESCAPE = \"Escape\";\n\nconst OPTION_LIST_Y_OFFSET = 10;\nconst OPTION_LIST_MIN_WIDTH = 100;\n\nexport const IndicTransliterate = ({\n  renderComponent = (props) => <input {...props} />,\n  lang = \"hi\",\n  offsetX = 0,\n  offsetY = 10,\n  onChange,\n  onChangeText,\n  onBlur,\n  value,\n  onKeyDown,\n  containerClassName = \"\",\n  containerStyles = {},\n  activeItemStyles = {},\n  maxOptions = 5,\n  hideSuggestionBoxOnMobileDevices = false,\n  hideSuggestionBoxBreakpoint = 450,\n  triggerKeys = [\n    TriggerKeys.KEY_SPACE,\n    TriggerKeys.KEY_ENTER,\n    TriggerKeys.KEY_RETURN,\n    TriggerKeys.KEY_TAB,\n  ],\n  insertCurrentSelectionOnBlur = true,\n  showCurrentWordAsLastSuggestion = true,\n  enabled = true,\n  ...rest\n}: IndicTransliterateProps): JSX.Element => {\n  const [left, setLeft] = useState(0);\n  const [top, setTop] = useState(0);\n  const [selection, setSelection] = useState<number>(0);\n  const [matchStart, setMatchStart] = useState(-1);\n  const [matchEnd, setMatchEnd] = useState(-1);\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [windowSize, setWindowSize] = useState({ width: 0, height: 0 });\n  const [direction, setDirection] = useState(\"ltr\");\n  const [googleFont, setGoogleFont] = useState<string | null>(null);\n  const [options, setOptions] = useState<string[]>([]);\n  const [logJsonArray, setLogJsonArray] = useState([]);\n  const [numSpaces, setNumSpaces] = useState(0);\n  const [parentUuid, setParentUuid] = useState(Math.random().toString(36).substr(2, 9));\n  const [uuid, setUuid] = useState(Math.random().toString(36).substr(2, 9));\n  const [subStrLength, setSubStrLength] = useState(0);\n  const [restart, setRestart] = useState(true);\n\n  const shouldRenderSuggestions = useMemo(\n    () =>\n      hideSuggestionBoxOnMobileDevices\n        ? windowSize.width > hideSuggestionBoxBreakpoint\n        : true,\n    [windowSize, hideSuggestionBoxBreakpoint, hideSuggestionBoxOnMobileDevices],\n  );\n\n  const reset = () => {\n    // reset the component\n    setSelection(0);\n    setOptions([]);\n  };\n\n  const handleSelection = (index: number, triggerKey = \" \") => {\n    const currentString = value;\n    // create a new string with the currently typed word\n    // replaced with the word in transliterated language\n    const newValue =\n      currentString.substring(0, matchStart) +\n      options[index] +\n      \" \" +\n      currentString.substring(matchEnd + 1, currentString.length);\n\n    if(logJsonArray.length){\n      let lastLogJson = logJsonArray[logJsonArray.length-1];\n      let logJson = {\n        keystrokes: lastLogJson.keystrokes,\n        results: lastLogJson.results,\n        opted: options[index],\n        created_at: new Date().toISOString()};\n      setLogJsonArray([...logJsonArray, logJson]);\n      setNumSpaces(numSpaces+1);\n    }\n\n    // set the position of the caret (cursor) one character after the\n    // the position of the new word\n    setTimeout(() => {\n      setCaretPosition(\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        inputRef.current!,\n        matchStart + options[index].length + 1\n      );\n    }, 1);\n\n    // bubble up event to the parent component\n    const e = {\n      target: { value: newValue },\n    } as unknown as React.FormEvent<HTMLInputElement>;\n    onChangeText(newValue);\n    onChange && onChange(e);\n    reset();\n    return inputRef.current?.focus();\n  };\n\n  const renderSuggestions = async (lastWord: string, wholeText: string) => {\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n    // fetch suggestion from api\n    // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${lastWord}`;\n\n    const numOptions = showCurrentWordAsLastSuggestion\n      ? maxOptions - 1\n      : maxOptions;\n\n    const data = await getTransliterateSuggestions(lastWord, {\n      numOptions,\n      showCurrentWordAsLastSuggestion,\n      lang,\n    });\n    setOptions(data ?? []);\n    let logJson = {\n              keystrokes: wholeText,\n              results: data,\n              opted: \"\",\n              created_at: new Date().toISOString()}\n\n    if(restart){\n      setRestart(false);\n      setLogJsonArray([logJson]);\n    }else{\n      setLogJsonArray([...logJsonArray, logJson]);\n    }\n  };\n\n  const getDirectionAndFont = async (lang: Language) => {\n    const langList = await getTransliterationLanguages();\n    const langObj = langList?.find((l) => l.LangCode === lang) as LangObject;\n    return [\n      langObj?.Direction ?? \"ltr\",\n      langObj?.GoogleFont,\n      langObj?.FallbackFont,\n    ];\n  };\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => {\n    const value = e.currentTarget.value;\n\n    if(numSpaces == 0 || restart){\n      if(value.length >= 4){\n      setSubStrLength(value.length-4);\n      }else{\n      setSubStrLength(0);\n      }\n    } \n\n    if (numSpaces >= 5){\n      const finalJson = {\"uuid\": uuid, \"parent_uuid\": parentUuid, \"word\": value, \"source\": localStorage.getItem('source') != undefined ? localStorage.getItem('source') : \"node-module\", \"language\": lang, \"steps\":logJsonArray};\n      setLogJsonArray([]);\n      setParentUuid(uuid);\n      setUuid(Math.random().toString(36).substr(2, 9));\n      setSubStrLength(value.length-2);\n      setNumSpaces(0);\n      setRestart(true);\n      fetch(\"https://backend.dev.shoonya.ai4bharat.org/logs/transliteration_selection/\", {\n        method: \"POST\",\n        body: JSON.stringify(finalJson),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n      })\n      .then(async (res) => {\n        if (!res.ok) {throw await res.json()};\n      })\n      .catch((err) => {\n        console.log(\"error\", err);\n      });\n    }\n\n    // bubble up event to the parent component\n    onChange && onChange(e);\n    onChangeText(value);\n\n    if (!shouldRenderSuggestions) {\n      return;\n    }\n\n    // get the current index of the cursor\n    const caret = getInputSelection(e.target as HTMLInputElement).end;\n    const input = inputRef.current;\n\n    if (!input) return;\n\n    const caretPos = getCaretCoordinates(input, caret);\n\n    // search for the last occurence of the space character from\n    // the cursor\n    const indexOfLastSpace =\n      value.lastIndexOf(\" \", caret - 1) < value.lastIndexOf(\"\\n\", caret - 1)\n        ? value.lastIndexOf(\"\\n\", caret - 1)\n        : value.lastIndexOf(\" \", caret - 1);\n\n    // first character of the currently being typed word is\n    // one character after the space character\n    // index of last character is one before the current position\n    // of the caret\n    setMatchStart(indexOfLastSpace + 1);\n    setMatchEnd(caret - 1);\n\n    // currentWord is the word that is being typed\n    const currentWord = value.slice(indexOfLastSpace + 1, caret);\n    if (currentWord && enabled) {\n      // make an api call to fetch suggestions\n    if(numSpaces == 0 || restart){\n      if(value.length >= 4){\n      renderSuggestions(currentWord, value.substr(value.length-4, value.length));\n      }else{\n      renderSuggestions(currentWord, value.substr(0, value.length));\n      }\n    }else{\n      renderSuggestions(currentWord, value.substr(subStrLength, value.length));\n    }\n\n      const rect = input.getBoundingClientRect();\n\n      // calculate new left and top of the suggestion list\n\n      // minimum of the caret position in the text input and the\n      // width of the text input\n      const left = Math.min(\n        caretPos.left,\n        rect.width - OPTION_LIST_MIN_WIDTH / 2,\n      );\n\n      // minimum of the caret position from the top of the input\n      // and the height of the input\n      const top = Math.min(caretPos.top + OPTION_LIST_Y_OFFSET, rect.height);\n\n      setTop(top);\n      setLeft(left);\n    } else {\n      reset();\n    }\n  };\n\n  const handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    const helperVisible = options.length > 0;\n\n    if (helperVisible) {\n      if (triggerKeys.includes(event.key)) {\n        event.preventDefault();\n        handleSelection(selection, event.key);\n      } else {\n        switch (event.key) {\n          case KEY_ESCAPE:\n            event.preventDefault();\n            reset();\n            break;\n          case KEY_UP:\n            event.preventDefault();\n            setSelection((options.length + selection - 1) % options.length);\n            break;\n          case KEY_DOWN:\n            event.preventDefault();\n            setSelection((selection + 1) % options.length);\n            break;\n          default:\n            onKeyDown && onKeyDown(event);\n            break;\n        }\n      }\n    } else {\n      onKeyDown && onKeyDown(event);\n    }\n  };\n\n  const handleBlur = (\n    event: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>,\n  ) => {\n    if (!isTouchEnabled()) {\n      if (insertCurrentSelectionOnBlur && options[selection]) {\n        handleSelection(selection);\n      } else {\n        reset();\n      }\n    }\n    onBlur && onBlur(event);\n  };\n\n  const handleResize = () => {\n    // TODO implement the resize function to resize\n    // the helper on screen size change\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n  };\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", handleResize);\n    const width = window.innerWidth;\n    const height = window.innerHeight;\n    setWindowSize({ width, height });\n\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    getDirectionAndFont(lang).then(([direction, googleFont, fallbackFont]) => {\n      setDirection(direction);\n      // import google font if not already imported\n      if (googleFont) {\n        if (!document.getElementById(`font-${googleFont}`)) {\n          const link = document.createElement(\"link\");\n          link.id = `font-${googleFont}`;\n          link.href = `https://fonts.googleapis.com/css?family=${googleFont}`;\n          link.rel = \"stylesheet\";\n          document.head.appendChild(link);\n        }\n        setGoogleFont(`${googleFont}, ${fallbackFont ?? \"sans-serif\"}`);\n      } else {\n        setGoogleFont(null);\n      }\n    });\n  }, [lang]);\n\n  return (\n    <div\n      // position relative is required to show the component\n      // in the correct position\n      style={{\n        ...containerStyles,\n        position: \"relative\",\n      }}\n      className={containerClassName}\n    >\n      {renderComponent({\n        onChange: handleChange,\n        onKeyDown: handleKeyDown,\n        onBlur: handleBlur,\n        ref: inputRef,\n        value: value,\n        \"data-testid\": \"rt-input-component\",\n        lang: lang,\n        style: {\n          direction: direction,\n          ...(googleFont && { fontFamily: googleFont }),\n        },\n        ...rest,\n      })}\n      {shouldRenderSuggestions && options.length > 0 && (\n        <ul\n          style={{\n            backgroundClip : \"padding-box\",\n            backgroundColor : \"#fff\",\n            border : \"1px solid rgba(0, 0, 0, 0.15)\",\n            boxShadow : \"0 6px 12px rgba(0, 0, 0, 0.175)\",\n            display: \"block\",\n            fontSize: \"14px\",\n            listStyle: \"none\",\n            padding: \"1px\",\n            textAlign: \"left\",\n            zIndex: 20000,\n            left: `${left + offsetX}px`,\n            top: `${top + offsetY}px`,\n            position: \"absolute\",\n            width: \"auto\",\n            ...(googleFont && { fontFamily: googleFont }),\n          }}\n          data-testid=\"rt-suggestions-list\"\n          lang={lang}\n        >\n          {/*\n           * convert to set and back to prevent duplicate list items\n           * that might happen while using backspace\n           */}\n          {Array.from(new Set(options)).map((item, index) => (\n            <li\n              style={index === selection ? { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#65c3d7\", color:\"#fff\", position: \"absolute\", top:\"-40px\"} : { cursor: \"pointer\",padding: \"10px\",minWidth: \"100px\",backgroundColor: \"#fff\", position: \"absolute\", top:\"-40px\"} }\n              onMouseEnter={() => {\n                setSelection(index);\n              }}\n              onClick={() => handleSelection(index)}\n              key={item}\n            >\n              {item}\n            </li>\n          ))}\n        </ul>\n      )}\n    </div>\n  );\n};\n\nexport type { IndicTransliterateProps, Language };\nexport { TriggerKeys, getTransliterateSuggestions };\nexport { getTransliterationLanguages };\n","export function getInputSelection(el: HTMLInputElement) {\n  const start = 0;\n  const end = 0;\n\n  if (!el) {\n    return { start, end };\n  }\n\n  if (\n    typeof el.selectionStart === \"number\" &&\n    typeof el.selectionEnd === \"number\"\n  ) {\n    return { start: el.selectionStart, end: el.selectionEnd };\n  }\n\n  return { start, end };\n}\n\nexport function setCaretPosition(elem: HTMLInputElement, caretPos: number) {\n  if (elem) {\n    if (elem.selectionStart) {\n      elem.focus();\n      elem.setSelectionRange(caretPos, caretPos);\n    } else {\n      elem.focus();\n    }\n  }\n}\n","import { Language } from \"../types/Language\";\nimport { BASE_URL } from \"../constants/Urls\";\n\ntype Config = {\n  numOptions?: number;\n  showCurrentWordAsLastSuggestion?: boolean;\n  lang?: Language;\n};\n\nexport const getTransliterateSuggestions = async (\n  word: string,\n  config?: Config,\n): Promise<string[] | undefined> => {\n  const { showCurrentWordAsLastSuggestion, lang } = config || {\n    numOptions: 5,\n    showCurrentWordAsLastSuggestion: true,\n    lang: \"hi\",\n  };\n  // fetch suggestion from api\n  // const url = `https://www.google.com/inputtools/request?ime=transliteration_en_${lang}&num=5&cp=0&cs=0&ie=utf-8&oe=utf-8&app=jsapi&text=${word}`;\n  // let myHeaders = new Headers();\n  // myHeaders.append(\"Content-Type\", \"application/json\");\n\n  const requestOptions = {\n    method: \"GET\",\n  };\n\n  try {\n    const res = await fetch(\n      BASE_URL +\n        `tl/${lang}/${\n          word === \".\" || word === \"..\"\n            ? \" \" + word.replace(\".\", \"%2E\")\n            : encodeURIComponent(word).replace(\".\", \"%2E\")\n        }`,\n      requestOptions,\n    );\n    const data = await res.json();\n     console.log(\"library data\", data);\n    if (data && data.result.length > 0) {\n      const found = showCurrentWordAsLastSuggestion\n        ? [...data.result, word]\n        : data.result;\n      return found;\n    } else {\n      if (showCurrentWordAsLastSuggestion) {\n        return [word];\n      }\n      return [];\n    }\n  } catch (e) {\n    // catch error\n    console.error(\"There was an error with transliteration\", e);\n    return [];\n  }\n};","export function isTouchEnabled() {\n  return (\n    \"ontouchstart\" in window ||\n    navigator.maxTouchPoints > 0 ||\n    navigator.msMaxTouchPoints > 0\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\n// import component\nimport { IndicTransliterate, getTransliterationLanguages } from \"@ai4bharat/indic-transliterate\";\n\n// Material Ui input component\nimport Input from \"@material-ui/core/Input\";\nimport { LangObject } from \"../../dist/types\";\n\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [languages, setLanguages] = useState<LangObject[]|undefined>();\n  const [lang, setLang] = useState(\"hi\");\n\n  useEffect(() => {\n    getTransliterationLanguages().then(langs => setLanguages(langs));\n  }, [])\n\n  return (\n    <div className=\"container\">\n      <h2>Indic transliterate</h2>\n\n      <select\n        className=\"language-dropdown\"\n        value={lang}\n        onChange={(e) => setLang(e.target.value)}\n      >\n        {languages?.map((l) => (\n          <option key={l.LangCode} value={l.LangCode}>\n            {l.DisplayName}\n          </option>\n        ))}\n      </select>\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-input\">Using input</label>\n      <IndicTransliterate\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-input\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-textarea\">Using textarea</label>\n      <IndicTransliterate\n        renderComponent={(props) => <textarea {...props} />}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-textarea\"\n      />\n\n      <div className=\"spacer\" />\n\n      <label htmlFor=\"react-transliterate-material-ui-input\">\n        Using Material UI input\n      </label>\n      <IndicTransliterate\n        renderComponent={(props) => {\n          const inputRef = props.ref;\n\n          delete props.ref;\n\n          return <Input fullWidth {...props} inputRef={inputRef} />;\n        }}\n        value={text}\n        onChangeText={(text) => {\n          setText(text);\n        }}\n        lang={lang}\n        placeholder=\"Start typing here...\"\n        id=\"react-transliterate-material-ui-input\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}